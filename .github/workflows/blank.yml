name: Build 5PRO

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE: 10G

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CLANG_VERSION: clang-r536225

    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date \"+%y%m%d\")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git dwarves libelf-dev ccache automake flex bison build-essential zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        
        # 创建ccache目录
        mkdir -p ${{ env.CCACHE_DIR }}
        
        # 配置ccache
        ccache --set-config=cache_dir=${{ env.CCACHE_DIR }}
        ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
        ccache --set-config=compression=true
        ccache --set-config=compression_level=6
        ccache --set-config=debug=true
        ccache --set-config=hash_dir=false  # 对CI环境很重要
        ccache --set-config=sloppiness=file_macro,locale,time_macros
        
        # 显示初始配置
        ccache --show-config
        ccache --show-stats
        ccache -z  # 重置统计

    # 缓存ccache目录
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('**/Kbuild') }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-
          ccache-${{ runner.os }}-

    # ccache缓存
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}
        restore-keys: |
          ccache-${{ runner.os }}-

    - name: Cache Clang toolchain
      id: cache-clang
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/kernel_workspace/clang-aosp
        key: ${{ env.CLANG_VERSION }}

    - name: Download & extract Clang-aosp
      if: steps.cache-clang.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir -p clang-aosp
        wget -O ${CLANG_VERSION}.tar.gz \
          https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/${CLANG_VERSION}.tar.gz
        tar -C clang-aosp -zxvf ${CLANG_VERSION}.tar.gz
        
    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive https://github.com/brokestar233/android_kernel_common_oneplus_sm8750 -b v3 android-kernel --depth=1
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
        sed -i 's/ -dirty//g' setlocalversion

        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        
    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count main) + 10606)
        echo "KSUVER=KSU_$KSU_VERSION" >> $GITHUB_ENV
        
    - name: Setup susfs
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
        cp ../susfs4ksu/kernel_patches/fs/* ./fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
        cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
        sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
        sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch

        patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
        patch -p1 -F 3 < syscall_hooks.patch

    - name: Apply HMBird GKI patch
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/drivers
        cat << 'EOF' > hmbird_patch.c
        #include <linux/init.h>
        #include <linux/module.h>
        #include <linux/of.h>
        #include <linux/slab.h>
        #include <linux/string.h>
        #include <linux/printk.h>  // 添加printk头文件
        
        static int __init hmbird_patch_init(void)
        {
            struct device_node *ver_np;
            const char *type;
            int ret;
        
            ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
            if (!ver_np) {
                 pr_info("hmbird_patch: version_type node not found\n");
                 return 0;
            }
        
            ret = of_property_read_string(ver_np, "type", &type);
            if (ret) {
                 pr_info("hmbird_patch: type property not found\n");
                 of_node_put(ver_np);
                 return 0;
            }
        
            if (strcmp(type, "HMBIRD_OGKI") != 0) {  // 修正字符串比较
                 of_node_put(ver_np);
                 return 0;
            }
        
            struct property *prop = of_find_property(ver_np, "type", NULL);
            if (prop) {
                 struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                 if (!new_prop) {
                      pr_err("hmbird_patch: kmalloc for new_prop failed\n");
                      of_node_put(ver_np);
                      return -ENOMEM;
                 }
                 memcpy(new_prop, prop, sizeof(*prop));
                 new_prop->value = kstrdup("HMBIRD_GKI", GFP_KERNEL);  // 使用kstrdup更安全
                 if (!new_prop->value) {
                      pr_err("hmbird_patch: kmalloc for new_prop->value failed\n");
                      kfree(new_prop);
                      of_node_put(ver_np);
                      return -ENOMEM;
                 }
                 new_prop->length = strlen("HMBIRD_GKI") + 1;
        
                 if (of_remove_property(ver_np, prop)) {
                      pr_err("hmbird_patch: of_remove_property failed\n");
                      kfree(new_prop->value);
                      kfree(new_prop);
                      of_node_put(ver_np);
                      return -EINVAL;
                 }
                 if (of_add_property(ver_np, new_prop)) {
                      pr_err("hmbird_patch: of_add_property failed\n");
                      kfree(new_prop->value);
                      kfree(new_prop);
                      of_node_put(ver_np);
                      return -EINVAL;
                 }
                 pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
            }
            else {
                pr_info("hmbird_patch: type property structure not found\n");
            }
            of_node_put(ver_np);
            return 0;
        }
        early_initcall(hmbird_patch_init);
        MODULE_LICENSE("GPL");
        MODULE_AUTHOR("reigadegr");
        MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
        EOF
        
        # 添加到Makefile
        if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
        fi

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # 配置ccache环境变量
        export CCACHE_BASEDIR="$GITHUB_WORKSPACE"
        export CCACHE_SLOPPINESS="include_file_ctime,include_file_mtime"
        export CCACHE_CPP2=yes
        export CCACHE_NOHASHDIR=yes
        
        # 设置编译器前缀
        export CC="ccache clang"
        export CXX="ccache clang++"
        
        # 构建命令
        LTO=thin
        export ARCH=arm64
        export SUBARCH=arm64
        export HEADER_ARCH=arm64
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z) 
        
        AR_CMD="ARCH=${ARCH} SUBARCH=${SUBARCH} HEADER_ARCH=${HEADER_ARCH}"
        BA_CMD="CC=${CC} CXX=${CXX}"
        EX_CMD="LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size STRIP=llvm-strip LLVM=1 LLVM_IAS=1"
        DEFCONFIG="gki_defconfig all"
        
        make O=out $AR_CMD $BA_CMD $EX_CMD $DEFCONFIG
        scripts/config --file out/.config -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN -d LTO_CLANG_FULL -e THINLTO
        make -j$(nproc --all) O=out $AR_CMD $BA_CMD $EX_CMD
    
    - name: Check kernel output files
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
        else
            echo "Kernel output file is empty"
            exit 1
        fi
      
    - name: Make Anykernel3
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
        rm -rf AnyKernel3/.git
        cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
    
    - name: Upload Image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ env.KSUVER }}
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image

    - name: Upload AnyKernel3
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*