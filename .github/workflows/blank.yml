name: Build 5PRO

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE: 10G

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CLANG_VERSION: clang-r536225

    steps:
    - uses: actions/checkout@v4

    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date \"+%y%m%d\")" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git dwarves libelf-dev ccache automake flex bison build-essential zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole rustc
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        
        # 配置ccache
        sudo /usr/sbin/update-ccache-symlinks
        echo "/usr/lib/ccache" >> $GITHUB_PATH
        ccache --set-config=cache_dir=$CCACHE_DIR
        ccache -z  # 清空统计

    # 新增ccache缓存
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}
        restore-keys: |
          ccache-${{ runner.os }}-

    - name: Cache Clang toolchain
      id: cache-clang
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/kernel_workspace/clang-aosp
        key: ${{ env.CLANG_VERSION }}

    - name: Download & extract Clang-aosp
      if: steps.cache-clang.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir -p clang-aosp
        wget -O ${CLANG_VERSION}.tar.gz \
          https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/${CLANG_VERSION}.tar.gz
        tar -C clang-aosp -zxvf ${CLANG_VERSION}.tar.gz
        
    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive https://github.com/brokestar233/android_kernel_common_oneplus_sm8750 -b v3 android-kernel --depth=1
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
        sed -i 's/ -dirty//g' setlocalversion

        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        
    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count main) + 10606)
        echo "KSUVER=KSU_$KSU_VERSION" >> $GITHUB_ENV
        
    - name: Setup susfs
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
        cp ../susfs4ksu/kernel_patches/fs/* ./fs/
        cp ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
        cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
        sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
        sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch

        patch -p1 -F 3 < 50_add_susfs_in_gki-android15-6.6.patch
        patch -p1 -F 3 < syscall_hooks.patch

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        LTO=thin
        export ARCH=arm64
        export SUBARCH=arm64
        export HEADER_ARCH=arm64
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z) 
        AR_CMD="ARCH=${ARCH} SUBARCH=${SUBARCH} HEADER_ARCH=${HEADER_ARCH}"
        BA_CMD="CC=ccache clang CXX=ccache clang++"
        EX_CMD="LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size STRIP=llvm-strip LLVM=1 LLVM_IAS=1"
        DEFCONFIG="gki_defconfig all"
        
        make O=out $AR_CMD $BA_CMD $EX_CMD $DEFCONFIG
        scripts/config --file out/.config -e LTO_CLANG -d LTO_NONE -e LTO_CLANG_THIN -d LTO_CLANG_FULL -e THINLTO
        make -j$(nproc --all) O=out $AR_CMD $BA_CMD $EX_CMD
        
        # 显示ccache统计
        ccache -s
    
    - name: Check kernel output files
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
        else
            echo "Kernel output file is empty"
            exit 1
        fi
      
    - name: Make Anykernel3
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
        rm -rf AnyKernel3/.git
        cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
    
    - name: Upload Image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ env.KSUVER }}
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image

    - name: Upload AnyKernel3
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*
