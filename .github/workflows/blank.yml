name: Build 5PRO

on:
  workflow_dispatch:

env:
  TZ: Asia/Shanghai
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE: 10G

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CLANG_VERSION: clang-r536225

    steps:
    - uses: actions/checkout@v4
    
    - name: Set swap to 10G
      uses: pierotofy/set-swap-space@master
      with:
        swap-size-gb: 10

    - name: Setup build kernel environment
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date \"+%y%m%d\")" >> $GITHUB_ENV
        sudo apt-get update
        # 安装 aria2 用于高效下载
        sudo apt-get install -y aria2
        sudo apt-get install git dwarves libelf-dev ccache automake flex bison build-essential \
              zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole
        mkdir -p $GITHUB_WORKSPACE/kernel_workspace
        
        # 创建ccache目录
        mkdir -p ${{ env.CCACHE_DIR }}
        
        # 配置ccache
        ccache --set-config=cache_dir=${{ env.CCACHE_DIR }}
        ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
        ccache --set-config=compression=true
        ccache --set-config=compression_level=6
        ccache --set-config=hash_dir=false  # 对CI环境很重要
        ccache --set-config=sloppiness=file_macro,locale,time_macros
        
        # 显示初始配置
        ccache --show-config
        ccache -z  # 重置统计

    # 缓存ccache目录
    - name: Cache ccache
      uses: actions/cache@v4
      with:
        path: ${{ env.CCACHE_DIR }}
        key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('**/Kbuild') }}
        restore-keys: |
          ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-
          ccache-${{ runner.os }}-

    - name: Cache Clang toolchain
      id: cache-clang
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/kernel_workspace/clang-aosp
        key: ${{ env.CLANG_VERSION }}

    - name: Download & extract Clang-aosp using aria2
      if: steps.cache-clang.outputs.cache-hit != 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        mkdir -p clang-aosp
        
        # 使用aria2下载Clang工具链
        DOWNLOAD_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/${CLANG_VERSION}.tar.gz"
        echo "下载链接: $DOWNLOAD_URL"
        
        # 使用aria2多线程下载
        aria2c -x16 -s16 -j16 -k1M --file-allocation=falloc --retry-wait=5 -m0 -c "$DOWNLOAD_URL" -o "${CLANG_VERSION}.tar.gz"
        
        # 验证下载完整性
        if [ ! -f "${CLANG_VERSION}.tar.gz" ]; then
            echo "错误: 下载失败！"
            exit 1
        fi
        
        # 解压文件
        tar -C clang-aosp -zxvf "${CLANG_VERSION}.tar.gz"
        
        # 清理下载文件
        rm -f "${CLANG_VERSION}.tar.gz"
        
    - name: Download kernel source
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone --recursive https://github.com/brokestar233/android_kernel_common_oneplus_sm8750 -b v3 android-kernel --depth=1
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
        sed -i 's/ -dirty//g' setlocalversion

        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
        git clone https://github.com/ShirkNeko/SukiSU_patch.git
        
    - name: Setup KernelSU
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
        KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count main) + 10606)
        echo "KSUVER=KSU_$KSU_VERSION" >> $GITHUB_ENV
        
    - name: Setup susfs (修复头文件和变量问题)
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
        cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
        
        cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
        cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
        
        # 应用补丁前修复关键问题
        sed -i 's/-32,12 +32,38/-32,11 +32,37/g' 50_add_susfs_in_gki-android15-6.6.patch
        sed -i '/#include <trace\/hooks\/fs.h>/d' 50_add_susfs_in_gki-android15-6.6.patch
        
        # 应用补丁
        patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
        patch -p1 -F 3 < syscall_hooks.patch || true

    - name: Apply HMBird GKI patch
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/drivers
        cat << 'EOF' > hmbird_patch.c
        #include <linux/init.h>
        #include <linux/module.h>
        #include <linux/of.h>
        #include <linux/slab.h>
        #include <linux/string.h>
        #include <linux/printk.h>
        
        static int __init hmbird_patch_init(void)
        {
            struct device_node *ver_np;
            const char *type;
            int ret;
        
            ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
            if (!ver_np) {
                 pr_info("hmbird_patch: version_type node not found\n");
                 return 0;
            }
        
            ret = of_property_read_string(ver_np, "type", &type);
            if (ret) {
                 pr_info("hmbird_patch: type property not found\n");
                 of_node_put(ver_np);
                 return 0;
            }
        
            if (strcmp(type, "HMBIRD_OGKI") != 0) {
                 of_node_put(ver_np);
                 return 0;
            }
        
            struct property *prop = of_find_property(ver_np, "type", NULL);
            if (prop) {
                 struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                 if (!new_prop) {
                      pr_err("hmbird_patch: kmalloc for new_prop failed\n");
                      of_node_put(ver_np);
                      return -ENOMEM;
                 }
                 memcpy(new_prop, prop, sizeof(*prop));
                 new_prop->value = kstrdup("HMBIRD_GKI", GFP_KERNEL);
                 if (!new_prop->value) {
                      pr_err("hmbird_patch: kmalloc for new_prop->value failed\n");
                      kfree(new_prop);
                      of_node_put(ver_np);
                      return -ENOMEM;
                 }
                 new_prop->length = strlen("HMBIRD_GKI") + 1;
        
                 if (of_remove_property(ver_np, prop)) {
                      pr_err("hmbird_patch: of_remove_property failed\n");
                      kfree(new_prop->value);
                      kfree(new_prop);
                      of_node_put(ver_np);
                      return -EINVAL;
                 }
                 if (of_add_property(ver_np, new_prop)) {
                      pr_err("hmbird_patch: of_add_property failed\n");
                      kfree(new_prop->value);
                      kfree(new_prop);
                      of_node_put(ver_np);
                      return -EINVAL;
                 }
                 pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
            }
            else {
                pr_info("hmbird_patch: type property structure not found\n");
            }
            of_node_put(ver_np);
            return 0;
        }
        early_initcall(hmbird_patch_init);
        MODULE_LICENSE("GPL");
        MODULE_AUTHOR("reigadegr");
        MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
        EOF
        
        if ! grep -q "hmbird_patch.o" Makefile; then
            echo "obj-y += hmbird_patch.o" >> Makefile
        fi

    - name: Add SUSFS Configuration Settings
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        # 确保配置文件存在
        if [ ! -f "arch/arm64/configs/gki_defconfig" ]; then
            echo "错误: gki_defconfig 文件不存在！"
            echo "===== arch/arm64/configs 目录内容 ====="
            ls -la arch/arm64/configs
            exit 1
        fi
        
        # 添加配置
        echo "CONFIG_KSU=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_MANUAL_HOOK=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> arch/arm64/configs/gki_defconfig
        echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> arch/arm64/configs/gki_defconfig

    - name: scx
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/HanKuCha/sched_ext.git
        cp -r ./sched_ext/* ./android-kernel/kernel/sched
        rm -rf ./sched_ext/.git

    - name: Build kernel
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
        
        # 配置ccache环境变量
        export CCACHE_BASEDIR="$GITHUB_WORKSPACE"
        export CCACHE_SLOPPINESS="include_file_ctime,include_file_mtime"
        export CCACHE_CPP2=yes
        export CCACHE_NOHASHDIR=yes
        
        # 设置编译器前缀
        export CC="ccache clang"
        export CXX="ccache clang++"
        
        # 构建命令
        export ARCH=arm64
        export SUBARCH=arm64
        export HEADER_ARCH=arm64
        export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
        export KBUILD_BUILD_HOST=Github-Action
        export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z) 
        export LLVM=1
        export LLVM_IAS=1
        
        # 1. 确保工具链可用
        echo "===== 验证工具链 ====="
        which clang || echo "Clang 未找到！"
        clang --version || true
        which ld.lld || echo "ld.lld 未找到！"
        ld.lld --version || true
        
        # 2. 准备构建目录
        echo "===== 准备构建目录 ====="
        rm -rf out
        mkdir -p out
        
        # 3. 创建最小配置
        echo "===== 创建最小配置 ====="
        cat > out/.config <<EOF
        CONFIG_KSU=y
        CONFIG_KSU_SUSFS=y
        CONFIG_LTO_CLANG=y
        CONFIG_LTO_NONE=n
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG_FULL=n
        CONFIG_THINLTO=y
        EOF
        
        # 4. 合并gki_defconfig到当前配置
        echo "===== 合并gki_defconfig ====="
        ./scripts/kconfig/merge_config.sh -O out out/.config arch/arm64/configs/gki_defconfig
        
        # 5. 更新配置
        echo "===== 更新配置 ====="
        make O=out ARCH=$ARCH olddefconfig
        
        # 6. 验证关键配置
        echo "===== 关键配置状态 ====="
        ./scripts/config --file out/.config -s LTO_CLANG
        ./scripts/config --file out/.config -s LTO_CLANG_THIN
        ./scripts/config --file out/.config -s KSU
        ./scripts/config --file out/.config -s KSU_SUSFS
        
        # 7. 执行构建
        echo "===== 开始构建内核 ====="
        make -j$(($(nproc --all) - 1)) O=out \
            ARCH=$ARCH \
            SUBARCH=$SUBARCH \
            HEADER_ARCH=$HEADER_ARCH \
            CC="$CC" \
            CXX="$CXX" \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            READELF=llvm-readelf \
            OBJSIZE=llvm-size \
            STRIP=llvm-strip
        
        # 显示ccache统计
        ccache -s
    
    - name: Check kernel output files
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
        else
            echo "Kernel output file is empty"
            echo "===== out/arch/arm64/boot 目录内容 ====="
            ls -la android-kernel/out/arch/arm64/boot
            exit 1
        fi
      
    - name: Make Anykernel3
      if: env.CHECK_IMAGE == 'true'
      run: |
        cd $GITHUB_WORKSPACE/kernel_workspace
        git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
        rm -rf AnyKernel3/.git
        cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/
    
    - name: Upload Image
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: Image-${{ env.KSUVER }}
        path: kernel_workspace/android-kernel/out/arch/arm64/boot/Image

    - name: Upload AnyKernel3
      if: env.CHECK_IMAGE == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: AK3-${{ env.KSUVER }}-${{ env.BUILD_TIME }}
        path: kernel_workspace/AnyKernel3/*