name: Build 5

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*.*.*.*'  # Trigger on new tags matching this pattern

env:
  TZ: Asia/Shanghai
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"
  CCACHE_MAXSIZE: 8G
  CLANG_VERSION: 19.0.0git-20240723
  CLANG_URL: https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read

    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      # Set up a dedicated workspace for all build-related files
      - name: Set up build workspace
        run: |
          mkdir -p kernel_workspace/src

      # Checkout repositories into the dedicated workspace
      - name: Checkout kernel source
        uses: actions/checkout@v4
        with:
          repository: brokestar233/android_kernel_common_oneplus_sm8750
          ref: v9
          path: kernel_workspace/src/android-kernel
          fetch-depth: 0

      - name: Checkout susfs4ksu
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/susfs4ksu
          ref: gki-android15-6.6
          path: kernel_workspace/src/susfs4ksu

      - name: Checkout SukiSU_patch
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/SukiSU_patch
          path: kernel_workspace/src/SukiSU_patch

      # Set swap space to 10G to avoid memory issues
      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      # Set up a dedicated directory for APT cache
      - name: Configure APT cache directory
        id: apt-cache-dir
        run: |
          echo "APT_CACHE_DIR=$HOME/apt-cache" >> $GITHUB_ENV
          mkdir -p "$HOME/apt-cache"

      # Cache APT packages for faster builds
      - name: Restore APT Cache
        uses: actions/cache@v3
        with:
          path: ${{ env.APT_CACHE_DIR }}
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/oos.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      # Install build dependencies
      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt-get update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-recommends \
           git dwarves libelf-dev ccache automake flex bison build-essential \
           zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole \
           libssl-dev libffi-dev libxml2-dev libxslt1-dev libgmp-dev libmpfr-dev libmpc-dev gcc-aarch64-linux-gnu

      # Get kernel source commit hash
      - name: Get kernel source commit hash
        id: kernel-commit
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/android-kernel
          echo "hash=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      # Cache Clang toolchain
      - name: Cache Clang
        id: cache-clang
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/kernel_workspace/src/clang-aosp
          key: ${{ runner.os }}-clang-${{ env.CLANG_VERSION }}

      # Download and extract the Clang toolchain
      - name: Download & extract Clang-aosp
        if: steps.cache-clang.outputs.cache-hit != 'true'
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src
          mkdir -p clang-aosp
          wget -qO- ${{ env.CLANG_URL }} | tar -zx -C clang-aosp

      # Cache Ccache directory for faster kernel builds
      - name: Restore Ccache
        uses: actions/cache@v3
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ steps.kernel-commit.outputs.hash }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-

      # Initialize Ccache and set its size
      - name: Initialize Ccache
        run: |
          ccache -M ${{ env.CCACHE_MAXSIZE }}
          ccache -z

      # Get and set the current build timestamp
      - name: Setup build date
        id: date
        run: |
          echo "current-date=$(TZ='${{ env.TZ }}' date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT

      # Patch setlocalversion script for custom version string
      - name: Patch setlocalversion
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/android-kernel
          sed -i 's/ -dirty//g' scripts/setlocalversion
          sed -i 's/OKI/android15-8/g' scripts/setlocalversion
          git revert --no-edit 0dbc805bbbaa8bf36c1531560ba7abb4e4f2088c

      # Download and integrate KernelSU patches
      - name: Setup KernelSU
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/android-kernel
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s susfs-main
          KSU_VERSION=$(cd KernelSU && expr $(git rev-list --count susfs-main) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      # Copy and apply SUSFS and SukiSU patches
      - name: Setup susfs
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/android-kernel
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          patch -p1 -F 3 < syscall_hooks.patch || true

      # Add SUSFS and optimization configuration to kernel defconfig
      - name: Add SUSFS and build configuration
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/android-kernel
          sed -i 's/check_defconfig//' ./build.config.gki
          if [ ! -f "arch/arm64/configs/gki_defconfig" ]; then
              echo "Error: gki_defconfig file not found!"
              ls -la arch/arm64/configs
              exit 1
          fi
          cat <<EOF >> arch/arm64/configs/gki_defconfig
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_HOOK_KPROBES=n
          CONFIG_KSU_TRACEPOINT_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          CONFIG_LTO=y
          CONFIG_AUTOFDO_CLANG=y
          CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          CONFIG_CRYPTO_LZ4K=n
          CONFIG_CRYPTO_LZ4KD=n
          CONFIG_CRYPTO_LZ4HC=n
          CONFIG_CRYPTO_842=n
          CONFIG_LOCALVERSION="-g4dc61d72e02f-abogki415959920-4k"
          EOF

      # Compile the kernel
      - name: Build kernel
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/android-kernel
          export KBUILD_BUILD_TIMESTAMP='Mon May 12 09:09:59 UTC 2025'
          export PATH="/usr/lib/ccache:${{ github.workspace }}/kernel_workspace/src/clang-aosp/bin:$PATH"
          export ARCH=arm64
          export SUBARCH=arm64
          export HEADER_ARCH=arm64
          export KBUILD_BUILD_HOST=localhost
          export KBUILD_BUILD_USER=Builder
          export LLVM=1
          export LLVM_IAS=1
          export KCFLAGS="-O2 -flto=thin -Wno-error"
          export KMI="SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0"
          export CC="ccache clang"
          export CXX="ccache clang++"
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export READELF=llvm-readelf
          export OBJSIZE=llvm-size
          export STRIP=llvm-strip
          export CLANG_TRIPLE=aarch64-linux-gnu-
          export CROSS_COMPILE=aarch64-linux-gnu-

          echo "===== Validating toolchain ====="
          which clang || { echo "Error: Clang not found!"; exit 1; }
          clang --version
          which ld.lld || { echo "Error: ld.lld not found!"; exit 1; }
          ld.lld --version

          make O=out ARCH=$ARCH SUBARCH=$SUBARCH gki_defconfig

          echo "===== Starting kernel build ====="
          make -j$(nproc --all) O=out

          # Display ccache stats after build
          ccache -s

      # Check for successful kernel compilation
      - name: Check kernel output files
        id: check_output
        run: |
          if [ -f "${{ github.workspace }}/kernel_workspace/src/android-kernel/out/arch/arm64/boot/Image" ]; then
              echo "CHECK_IMAGE=true" >> $GITHUB_ENV
          else
              echo "Kernel output file is missing. Build failed."
              echo "===== Contents of out/arch/arm64/boot ====="
              ls -la ${{ github.workspace }}/kernel_workspace/src/android-kernel/out/arch/arm64/boot
              exit 1
          fi

      # Package kernel into AnyKernel3 zip
      - name: Make Anykernel3
        if: env.CHECK_IMAGE == 'true'
        run: |
          cd ${{ github.workspace }}/kernel_workspace/src/SukiSU_patch/AnyKernel3
          cp ${{ github.workspace }}/kernel_workspace/src/android-kernel/out/arch/arm64/boot/Image .
          zip -r9 ${{ github.workspace }}/AnyKernel3-${{ env.KSUVER }}.zip *

      # Upload the kernel Image as an artifact
      - name: Upload Image
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Image-${{ env.KSUVER }}
          path: ${{ github.workspace }}/kernel_workspace/src/android-kernel/out/arch/arm64/boot/Image

      # Upload the AnyKernel3 zip as an artifact
      - name: Upload AnyKernel3
        if: env.CHECK_IMAGE == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: AnyKernel3-${{ env.KSUVER }}
          path: ${{ github.workspace }}/AnyKernel3-${{ env.KSUVER }}.zip

      # Create a new GitHub release and upload assets
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        if: success() && startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.KSUVER }}
          name: "sukisu ${{ env.KSUVER }}"
          generate_release_notes: true
          body: |
            **Build Details**
            - KernelSU Version: ${{ env.KSUVER }}
            - Build Date: ${{ steps.date.outputs.current-date }}
            **Build Environment:**
            - OS: ubuntu-latest
            - Clang Version: ${{ env.CLANG_VERSION }}
          files: |
            ${{ github.workspace }}/AnyKernel3-${{ env.KSUVER }}.zip
            ${{ github.workspace }}/kernel_workspace/src/android-kernel/out/arch/arm64/boot/Image