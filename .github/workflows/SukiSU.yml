name: Build Oplus Kernel with SukiSU # 构建一加内核

on:
  workflow_dispatch:
    inputs:
      SoC:
        description: "芯片型号 // SoC to build"
        required: true
        default: 'sm8750'

      FILE:
        description: "配置文件名 // Configuration file name"
        required: true
        type: choice
        options:
          - oneplus_13t
          - clo_oneplus_13t
          - clo_oneplus_ace5pro
          - test
        default: clo_oneplus_ace5pro

      Chipset:
        description: "开发板代号 // Chipset codename"
        required: true
        default: 'sun'

      VERSION:
        description: "版本格式 // Format: android15-6.6 [Android版本-内核版本]"
        required: true
        default: 'android15-6.6'

      KERNEL_NAME:
        description: "内核名称后缀 // Kernel name suffix"
        required: true
        default: '-andro'

      KSU_CONFIG:
        description: "选择 KernelSU 配置 // Select KernelSU configuration"
        required: true
        type: choice
        options:
          - Kernel_without_KSU
          - SukiSU_dev
          - SukiSU_main
        default: SukiSU_main

      SUSFS:
        description: "启用 SUSFS // Enable SUSFS"
        required: true
        type: choice
        options:
          - enable
          - disable
        default: enable
        
      LTO:
        description: "Type of LTO optimisation to use"
        required: true
        type: choice
        options:
          - full
          - thin
          - none
        default: thin # useless right now, forced to thin always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Parse VERSION input # 解析 VERSION 输入
        run: |
          VERSION=$(echo "${{ github.event.inputs.VERSION }}")
          ANDROID_VERSION=$(echo "$VERSION" | cut -d'-' -f1)
          KERNEL_VERSION=$(echo "$VERSION" | cut -d'-' -f2)
          echo "ANDROID_VERSION=$ANDROID_VERSION" >> $GITHUB_ENV
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: Parse Device Name # 解析机型名称
        run: |
          FILE="${{ inputs.FILE }}"

          # 移除末尾的 _v（如果有）
          BASE_NAME="${FILE%_u}"
          BASE_NAME="${BASE_NAME%_v}"

          # 提取品牌（第一个下划线前的部分）
          RAW_BRAND="${BASE_NAME%%_*}"

          # 提取型号（品牌后的所有部分）
          MODEL="${BASE_NAME#*_}"
          MODEL="${MODEL//_/ }"  # 把下划线换成空格，比如 ace5_pro -> ace5 pro

          # 品牌映射：首字母大写或自定义映射
          case "$RAW_BRAND" in
            oneplus) BRAND="OnePlus" ;;
            oppo)    BRAND="OPPO" ;;
            *)       BRAND="$(echo "$RAW_BRAND" | sed 's/.*/\u&/')" ;;  # 默认只大写首字母
          esac

          echo "BRAND=${BRAND}" >> $GITHUB_ENV
          echo "MODEL=${MODEL}" >> $GITHUB_ENV
          echo "Device 机型：${BRAND} ${MODEL}"

      - name: Set Environment Variable # 设置内核环境变量
        run: |
          WORKSPACE_DIR="$GITHUB_WORKSPACE/kernel_workspace"
          PLATFORM_DIR="$WORKSPACE_DIR/kernel_platform"
          COMMON_DIR="$PLATFORM_DIR/common"
          DEFCONFIG="$COMMON_DIR/arch/arm64/configs/gki_defconfig"
          MSMCONFIG="$PLATFORM_DIR/msm-kernel/arch/arm64/configs/gki_defconfig"

          # Set working DIR as an environment variable for future steps
          echo "WORKSPACE=$WORKSPACE_DIR" >> $GITHUB_ENV
          echo "PLATFORM=$PLATFORM_DIR" >> $GITHUB_ENV
          echo "COMMON=$COMMON_DIR" >> $GITHUB_ENV
          echo "DEFCONFIG=$DEFCONFIG" >> $GITHUB_ENV
          echo "MSMCONFIG=$MSMCONFIG" >> $GITHUB_ENV

      - name: Maximize build space # 最大化构建空间
        #uses: easimon/maximize-build-space@master
        #with:
        #  root-reserve-mb: 8192
        #  temp-reserve-mb: 2048
        #  swap-size-mb: 8192
        #  remove-dotnet: 'true'
        #  remove-android: 'true'
        #  remove-haskell: 'true'
        #  remove-codeql: 'true'
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          # Remove large unwanted packages
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          # Regex-based purges (for bulk families like mysql, php, dotnet)
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          # Clean up
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h

      - name: Configure Git & Install dependencies # 配置 Git & 安装依赖
        run: |
          git config --global user.name "schqiushui"
          git config --global user.email "orochi9999@gmail.com"
          sudo apt update -y
          sudo apt-mark hold firefox
          sudo apt upgrade -y -o Dpkg::Options::="--force-confold"
          sudo apt install -y python3 git git-lfs curl && git lfs install

      - name: Install repo tool # 安装 repo 工具
        run: |
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize repo and sync # 初始化 repo 和同步
        run: |
          mkdir "$WORKSPACE" && cd "$WORKSPACE"
          repo init -u https://github.com/rin0011/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.SoC }} -m ${{ inputs.FILE }}.xml --depth=1 || { echo "repo init 失败"; exit 1; }
          #repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.SoC }} -m ${{ inputs.FILE }}.xml --depth=1 || { echo "repo init 失败"; exit 1; }
          #repo init -u https://github.com/schqiushui/kernel_manifest.git -b refs/heads/oneplus/${{ inputs.SoC }} -m oneplus_13_v.xml --depth=1 || { echo "repo init 失败"; exit 1; }
          repo sync -c -j$(nproc --all) --no-tags || { echo "repo sync 失败"; exit 1; }
          
          clangver="r522817"
          
          if [[ "${{ inputs.FILE }}" == "clo_oneplus_13t" ]]; then
            clangver="r536225"
            
            # Use newer profiles
            rm "$PLATFORM/prebuilts/clang/host/linux-x86/profiles/pgo-r522817.tar.xz"
            rm "$PLATFORM/prebuilts/clang/host/linux-x86/profiles/bolt-r522817.tar.xz"

            wget https://github.com/epicmann24/kernel_manifest/raw/refs/heads/oneplus/sm8750/pgo.tar.xz -O "$PLATFORM/prebuilts/clang/host/linux-x86/profiles/pgo-$clangver.tar.xz"
            wget https://github.com/epicmann24/kernel_manifest/raw/refs/heads/oneplus/sm8750/bolt.tar.xz -O "$PLATFORM/prebuilts/clang/host/linux-x86/profiles/bolt-$clangver.tar.xz"
          fi

          sed -i "s/KBUILD_CFLAGS += -mcpu=oryon-1/ /" "$COMMON/Makefile"
          
          git clone https://gitlab.com/kei-space/clang/$clangver.git $PLATFORM/prebuilts/clang/host/linux-x86/clang-$clangver
          
          rm -rf "$PLATFORM/prebuilts/clang/host/linux-x86/clang-r510928"
          
          sed -i "s/r510928/$clangver/g" $PLATFORM/common/build.config.constants
          #sed -i 's/r510928/r547379/g' $PLATFORM/msm-kernel/build.config.constants
          #sed -i 's/r510928/r547379/g' $PLATFORM/.source_date_epoch_dir/build.config.constants
          #sed -i '/VERSIONS = \[/,/\]/c\VERSIONS = [\n    # keep sorted\n    "r547379",\n]' $PLATFORM/prebuilts/clang/host/linux-x86/kleaf/versions.bzl

      - name: Get KernelSU version # 获取 KernelSU 版本
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') }}
        run: |
          echo "KSU_TYPE=$(echo '${{ inputs.KSU_CONFIG }}' | cut -d'_' -f1)" >> $GITHUB_ENV
          if [[ "${{ inputs.KSU_CONFIG }}" == "SukiSU_dev" ]]; then
            echo "SukiSU_BRANCH=susfs-test" >> $GITHUB_ENV
          elif [[ "${{ inputs.KSU_CONFIG }}" == "SukiSU_main" ]]; then
            echo "SukiSU_BRANCH=susfs-main" >> $GITHUB_ENV
          fi

      - name: SukiSU setup # 配置 SukiSU
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') }}
        run: |
          cd "$PLATFORM"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s ${{ env.SukiSU_BRANCH }}

          cd ./KernelSU
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile
          echo "KernelSU 版本：$KSU_VERSION"

      - name: Apply SUSFS & Hide patches # 应用 SUSFS & 隐藏补丁
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') && inputs.SUSFS == 'enable'}}
        run: |
          cd "$WORKSPACE"
          git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}

          # Copy patches
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch "$COMMON/"
          cp ./susfs4ksu/kernel_patches/fs/* "$COMMON/fs/"
          cp ./susfs4ksu/kernel_patches/include/linux/* "$COMMON/include/linux/"
          cp ./SukiSU_patch/69_hide_stuff.patch "$COMMON/"

          # Patches apply
          cd "$COMMON"
          echo "正在给内核打 susfs 补丁..."

          if [[ "${{ env.KERNEL_VERSION }}" == "6.6" && "${{ inputs.FILE }}" != "oneplus_13t" && "${{ inputs.FILE }}" != "clo_oneplus_13t" && "${{ inputs.FILE }}" != "test" ]]; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace/hooks/fs.h>' ./fs/namespace.c
          fi

          patch -p1 < "50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch" || { echo "应用 susfs 补丁失败"; exit 1; }
          echo "susfs 补丁应用完成"

          echo "正在打隐藏应用补丁..."
          patch -p1 -F 3 < "69_hide_stuff.patch" || { echo "应用隐藏应用补丁失败"; exit 1; }
          echo "隐藏应用补丁应用完成"

      - name: Apply New Hooks patches # 应用新的钩子补丁
        if: ${{ startsWith(inputs.KSU_CONFIG, 'SukiSU') }}
        run: |
          cd "$WORKSPACE"
          if [ ! -d SukiSU_patch ]; then
            git clone https://github.com/SukiSU-Ultra/SukiSU_patch.git
          else
            echo "SukiSU_patch 目录已存在，跳过克隆。"
          fi
          cp ./SukiSU_patch/hooks/syscall_hooks.patch "$COMMON/"

          cd "$COMMON"
          patch -p1 -F 3 < "syscall_hooks.patch" || { echo "应用 syscall_hooks 补丁失败"; exit 1; }

      - name: Configure kernel # 配置内核
        run: |
          cd "$WORKSPACE"

          # Remove protected exports and strings
          rm $PLATFORM/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm $PLATFORM/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

          # Set LTO
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' "$DEFCONFIG"
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' "$DEFCONFIG"

          
          # Adjust localversion strings
          sed -i 's/check_defconfig//' "$PLATFORM/common/build.config.gki"
          sed -i 's/ -dirty//g' "$PLATFORM/common/scripts/setlocalversion"
          sed -i 's/ -dirty//g' "$PLATFORM/msm-kernel/scripts/setlocalversion"
          sed -i 's/ -dirty//g' "$PLATFORM/external/dtc/scripts/setlocalversion"

          # Set LTO
          sed -i '/echo "LTO $LTO "/i export LTO=thin' "$PLATFORM/oplus/build/oplus_setup.sh"
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' "$PLATFORM/oplus/build/oplus_setup.sh"
          
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" "$PLATFORM/build/kernel/kleaf/impl/stamp.bzl"
          sed -i '/KMI_GENERATION/s/-$oki_infix//g' "$PLATFORM/build/kernel/kleaf/impl/stamp.bzl"
          sed -i 's/-4k/-Epicmann24/' "$DEFCONFIG"

          # Set ZRAM
          echo "CONFIG_ZRAM_DEF_COMP_LZORLE=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_LZO=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_ZSTD=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_LZ4HC=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_842=n" >> "$DEFCONFIG"
          echo "CONFIG_ZRAM_DEF_COMP_LZ4=y" >> "$DEFCONFIG"
          echo 'CONFIG_ZRAM_DEF_COMP="lz4"' >> "$DEFCONFIG"

          # Replace kernel name strings
          #echo "正在设置内核名称..."
          sed -i '$s|echo "\$res"|echo "\${{ inputs.KERNEL_NAME }}"|' "$COMMON/scripts/setlocalversion"
          echo "内核名称设置完成"

          # Set KSU config to gki_defconfig
          echo "正在更新KernelSU 内核配置..."
          echo "CONFIG_KSU=y" >> "$DEFCONFIG"
          echo "CONFIG_KPM=y" >> "$DEFCONFIG"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n >> "$DEFCONFIG"
          echo "CONFIG_KSU_MANUAL_HOOK=y >> "$DEFCONFIG"

          # Wakelock Blocker
          echo "CONFIG_BOEFFLA_WL_BLOCKER=y" >> "$DEFCONFIG"
          sed -i 's/CONFIG_PM_WAKELOCKS_LIMIT=0/CONFIG_PM_WAKELOCKS_LIMIT=10/' "$DEFCONFIG"
          sed -i 's/# CONFIG_PM_WAKELOCKS_GC is not set/CONFIG_PM_WAKELOCKS_GC=y/' "$DEFCONFIG"
          #sed -i 's/placeholder/gauge;sscrpcd:2310;b0000000.qcom,cnss-peach;wired wakelock;cne_wl_;radio-data-interface;fastrpc-secure;eventpoll;event0;event8;event2;event3;9-0028;amd_lock;lux_aod_lock;a600000.ssusb;qcom_rx_wakelock;wlan;wlan_wow_wl;NETLINK;IPA_WS;\[timerfd\];wlan_ipa;wlan_pno_wl;DIAG_WS;qcom_sap_wakelock;pmo_wow_wl;898000.qcom,qup_uart;rmnet_ctl;hal_bluetooth_lock;SensorsHAL_WAKEUP;ena600000.ssusb;gesture_prox_lock;gnss_hal;prox_lock;IPA_CLIENT_APPS_LAN_CONS;IPA_CLIENT_APPS_WAN_LOW_LAT_CONS;RMNET_SHS;IPA_CLIENT_APPS_WAN_COAL_CONS;oplus_shaking_lock;8-0028;phone_prox_lock;qrtr_ws;rmnet_ipa%d;wlan_ap_assoc_lost_wl;radio-data-interface;tftp_server_wakelock;pedometer_minute_lock;wlan_roam_ho_wl;10-0028;vdev_start;vdev_stop;vdev_delete/' "$COMMON/drivers/base/power/boeffla_wl_blocker.h" || true
          sed -i 's/placeholder/gauge;sscrpcd:2310;b0000000.qcom,cnss-peach;cne_wl_;radio-data-interface;fastrpc-secure;eventpoll;event0;event8;event2;event3;9-0028;amd_lock;lux_aod_lock;a600000.ssusb;qcom_rx_wakelock;wlan;wlan_wow_wl;NETLINK;IPA_WS;\[timerfd\];wlan_ipa;wlan_pno_wl;DIAG_WS;qcom_sap_wakelock;pmo_wow_wl;898000.qcom,qup_uart;rmnet_ctl;hal_bluetooth_lock;SensorsHAL_WAKEUP;ena600000.ssusb;gesture_prox_lock;gnss_hal;prox_lock;IPA_CLIENT_APPS_LAN_CONS;IPA_CLIENT_APPS_WAN_LOW_LAT_CONS;RMNET_SHS;IPA_CLIENT_APPS_WAN_COAL_CONS;oplus_shaking_lock;8-0028;phone_prox_lock;qrtr_ws;rmnet_ipa%d;wlan_ap_assoc_lost_wl;radio-data-interface;tftp_server_wakelock;pedometer_minute_lock;wlan_roam_ho_wl;10-0028;vdev_start;vdev_stop;vdev_delete/' "$COMMON/drivers/base/power/boeffla_wl_blocker.h" || true

          # Optimization
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "$DEFCONFIG"
          #echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$DEFCONFIG"
          echo "CONFIG_DYNAMIC_FTRACE_WITH_CALL_OPS=y" >> "$DEFCONFIG"
          echo "CONFIG_AUTOFDO_CLANG=y" >> "$DEFCONFIG"
          echo "CONFIG_SCHED_CLUSTER=y" >> "$DEFCONFIG"

          # Polly
          #echo "CONFIG_LLVM_POLLY=y" >> "$DEFCONFIG"
          echo "CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y" >> "$DEFCONFIG"
          
          # LRNG
          echo "CONFIG_LRNG=y" >> "$DEFCONFIG"
          echo "CONFIG_RANDOM_DEFAULT_IMPL=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_IRQ=y" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_SCHED=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_CPU=y" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_JENT=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_CONTINUOUS_COMPRESSION_ENABLED=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_DRNG_ATOMIC=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_SELFTEST=n" >> "$DEFCONFIG"
          echo "CONFIG_LRNG_RANDOM_IF=y" >> "$DEFCONFIG"
          
          
          # Filesystem Features
          echo "CONFIG_TMPFS_XATTR=y" >> "$DEFCONFIG"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$DEFCONFIG"
          

          # Use SukiSU default config
          #echo "CONFIG_KSU_SUSFS=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$DEFCONFIG"
          #echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$DEFCONFIG"
          echo "更新KernelSU 内核配置完成"

          # Add tethering config setting
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$DEFCONFIG"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$DEFCONFIG"
          
          # Add bbr and fq config setting
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$DEFCONFIG"
          echo "CONFIG_DEFAULT_BBR=y" >>  "$DEFCONFIG"
          
          # Add rcu config setting
          echo "CONFIG_RCU_TRACE=n" >> "$DEFCONFIG"
          
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$DEFCONFIG"

          # Remove unnecessary defconfig entries
          sed -i "s/CONFIG_PRINTK_TIME=y/CONFIG_PRINTK_TIME=n/" "$DEFCONFIG"
          sed -i "s/CONFIG_PRINTK_CALLER=y/CONFIG_PRINTK_CALLER=n/" "$DEFCONFIG"
          echo "CONFIG_TCP_CONG_CUBIC=n" >> "$DEFCONFIG"
          echo "CONFIG_MQ_IOSCHED_KYBER=n" >> "$DEFCONFIG"

          # Optimize networking
          cd "$COMMON/net/ipv4"
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = 150;/' tcp_ipv4.c
          sed -i 's/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = 110;/' tcp_ipv4.c
          
          git status
          cat "$DEFCONFIG"
      - name: Build kernel # 构建内核
        run: |
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          cd "$PLATFORM"

          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.Chipset }}" == "sun" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          
          (stdbuf -oL bash -c '
            while true; do
              echo "=== $(date) ==="
              free -h
              echo "======"
              df -h
              echo "======"
              top -b -n 1 | head -n 15
              echo ""
              sleep 60
            done
          ') &
          MONITOR_PID=$!
          trap "kill $MONITOR_PID" EXIT

          echo "开始构建内核，构建类型：$BUILD_TYPE"
          if [ -f ./build_with_bazel.py ]; then
          echo "1st build"
            if [[ "${{ inputs.FILE }}" == "test" ]]; then
              ./oplus/bazel/oplus_modules_variant.sh ${{ inputs.Chipset }} "$BUILD_TYPE" ""
              ./build_with_bazel.py -t ${{ inputs.Chipset }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
            else
              cd common
              bash drivers/of/overwriter/overwrite_configs/convert_configs.sh
              cd ..
              ./tools/bazel run --config=fast --config=stamp --lto=thin --verbose_failures //common:kernel_aarch64_dist -- --dist_dir=dist
            fi
          else
            echo "2nd build" #original
            LTO=thin ./oplus/build/oplus_build_kernel.sh ${{ inputs.Chipset }} "$BUILD_TYPE"
          fi

      - name: Make AnyKernel3 # 制作 AnyKernel3
        run: |
          cd "$WORKSPACE"
          mkdir -p image_output

          # Clone AnyKernel3
          git clone https://github.com/epicmann24/AnyKernel3.git -b gki-2.0 --depth=1 && rm -rf ./AnyKernel3/.git
          
          # Copy kernel
          echo "copy kernel"
          #IMAGE_PATH=$(find "$PLATFORM/../out" -name "Image")
          IMAGE_PATH=$(find "$PLATFORM/dist/" -name "Image")
          if [ -n "$IMAGE_PATH" ]; then
            cp "$IMAGE_PATH" "$WORKSPACE/AnyKernel3/Image"
            cp "$IMAGE_PATH" "$WORKSPACE/image_output/Image"
            echo "Image 文件已找到:$IMAGE_PATH"
          else
            echo "Image 文件未找到"
            exit 1
          fi

          # Copy dtbo.img
          if false; then
            readarray -d '' DTBO_FILES < <(find device/ -type f -name '*dtbo.img' -print0)

            if [ ${#DTBO_FILES[@]} -gt 0 ]; then
                cp "${DTBO_FILES[@]}" "$WORKSPACE/image_output/"
                echo "已复制以下文件到 image_output/："
                printf "%s\n" "${DTBO_FILES[@]}"
            else
                echo "未找到任何 dtbo.img 文件"
            fi
            cp $WORKSPACE/image_output/dtbo.img "$WORKSPACE/AnyKernel3/dtbo.img"
          fi

          # Copy boot.img
          if false; then
          echo "copy boot.img"
          BOOTIMG_PATH=$(find "$PLATFORM/dist/" -name "boot.img")
          if [ -n "$BOOTIMG_PATH" ]; then
            cp "$BOOTIMG_PATH" "$WORKSPACE/image_output/boot.img"
            echo "boot.img 文件已找到:$BOOTIMG_PATH"
          else
            echo "boot.img 文件未找到，已跳过复制"
          fi
          fi

      - name: Apply patch_linux and replace Image # 应用 patch_linux 并替换 Image
        run: |
          cd "$WORKSPACE/image_output"
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.12.0/patch_linux
          chmod +x patch_linux
          ./patch_linux || { echo "应用 patch_linux 失败"; exit 1; }

          cp oImage "$WORKSPACE/AnyKernel3/Image"
          echo "Patched Image 文件替换成功"

      - name: Get formatted date # 获取格式化日期
        id: formatted_date
        run: |
          DATE=$(date +'%y%m%d-%H%M')
          echo "formatted=$DATE" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 # 上传 AnyKernel3
        uses: actions/upload-artifact@v4
        with:
          name: "SukiSU-AnyKernel3-${{ inputs.FILE }}-${{ env.KSUVER }}-${{ steps.formatted_date.outputs.formatted }}"
          path: ${{ env.WORKSPACE }}/AnyKernel3/*

      - name: Upload Image # 上传 Image
        if: false
        uses: actions/upload-artifact@v4
        with:
          name: "Image-${{ inputs.FILE }}-SukiSU-${{ env.KSUVER }}-${{ steps.formatted_date.outputs.formatted }}"
          path: ${{ env.WORKSPACE }}/image_output/*
          
      - name: Upload config # 上传 Config
        uses: actions/upload-artifact@v4
        with:
          name: "Config"
          path: ${{ env.WORKSPACE }}/kernel_platform/msm-kernel/.config

      - name: Zip AnyKernel3 # 创建 AnyKernel3 压缩文件
        run: |
          cd "$WORKSPACE/AnyKernel3"
          zip -r "$WORKSPACE/AnyKernel3-${{ inputs.FILE }}-SukiSU-${{ env.KSUVER }}-${{ steps.formatted_date.outputs.formatted }}.zip" *

      - name: Create Release version and upload # 创建正式版本并上传
        if: false
        uses: softprops/action-gh-release@v2
        with:
          name: "内核发布: ${{ env.BRAND }}-${{ env.MODEL }}-${{ steps.formatted_date.outputs.formatted }}"
          tag_name: "${{ inputs.FILE }}-${{ steps.formatted_date.outputs.formatted }}"
          body: |
            OnePlus Kernel Build
            - Device 机型: `${{ env.BRAND }} ${{ env.MODEL }}`
            - SoC 型号: `${{ inputs.SoC }}`
            - Chipset 代号: `${{ inputs.Chipset }}`
            - KernelSU 类型: `${{ env.KSU_TYPE }}`
            - Branch 版本: `${{ env.KSUVER }}`
            - SUSFS 补丁: `${{ inputs.SUSFS }}`
            - Kernel 版本: `${{ inputs.VERSION }}`
            - 构建时间: `${{ steps.formatted_date.outputs.formatted }}`
          files: |
            ${{ env.WORKSPACE }}/AnyKernel3-*.zip
            ${{ env.WORKSPACE }}/image_output/*
