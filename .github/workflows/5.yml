name: Build boot 5PRO

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "请输入要获取的 release 版本 tag（如 PKR110_15.0.0.840(CN01)，留空则自动获取最新）"
        required: false
      file_name:
        description: "请选择要获取的文件"
        required: true
        default: boot.img
        type: choice
        options:
          - boot.img
          - init_boot.img
          - fastboot_firmware.zip

  push:
    tags:
      - "v*.*.*"

env:
  TZ: Asia/Shanghai
  CCACHE_DIR: ${{ github.workspace }}/ccache
  CCACHE_COMPRESS: 1
  CCACHE_MAXSIZE: 10G

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    env:
      CLANG_VERSION: clang-r536225
    permissions:
      contents: write
      actions: read

    steps:
      - uses: actions/checkout@v4

      - name: Set swap to 10G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 10

      - name: Get asset download url from tag and file name
        id: get-asset-url
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          file="${{ github.event.inputs.file_name }}"

          if [ -n "${{ github.event.inputs.tag_name }}" ]; then
            tag="${{ github.event.inputs.tag_name }}"
            api="https://api.github.com/repos/rin0011/opace5_pro_fw/releases/tags/$tag"
            asset_url=$(curl -s "$api" | jq -r --arg file "$file" '.assets[] | select(.name==$file) | .browser_download_url')
            if [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
              echo "::error::未找到 $file (tag: $tag)"
              exit 1
            fi
          else
            # 自动获取最新 release
            api="https://api.github.com/repos/rin0011/opace5_pro_fw/releases/latest"
            asset_url=$(curl -s "$api" | jq -r --arg file "$file" '.assets[] | select(.name==$file) | .browser_download_url')
            if [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
              echo "::error::未找到最新发行版中的 $file"
              exit 1
            fi
          fi
          echo "ASSET_URL=$asset_url" >> $GITHUB_ENV

      - name: Download selected asset
        run: |
          file="${{ github.event.inputs.file_name }}"
          curl -fL "$ASSET_URL" -o "$file"
          if [ ! -f "$file" ]; then
            echo "::error::文件下载失败"
            exit 1
          fi
          filesize=$(wc -c < "$file")
          echo "$file 文件大小: $filesize 字节"
          if [ "$filesize" -lt 10240 ]; then
            echo "::warning::$file 文件大小异常 ($filesize 字节) - 可能是无效文件"
          fi
          echo "BOOT_IMG_PATH=$GITHUB_WORKSPACE/$file" >> $GITHUB_ENV

      - name: Setup build kernel environment
        run: |
          echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%y%m%d")" >> $GITHUB_ENV
          sudo apt-get update
          sudo apt-get install -y aria2 git dwarves libelf-dev ccache automake flex bison build-essential \
            zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler python3 make pahole \
            libssl-dev libffi-dev libxml2-dev libxslt1-dev libgmp-dev libmpfr-dev libmpc-dev unzip
          mkdir -p $GITHUB_WORKSPACE/kernel_workspace
          mkdir -p "${CCACHE_DIR}"
          ccache --set-config=cache_dir="${CCACHE_DIR}"
          ccache --set-config=max_size="${CCACHE_MAXSIZE}"
          ccache --set-config=compression=true
          ccache --set-config=compression_level=6
          ccache --set-config=hash_dir=false
          ccache --set-config=sloppiness=file_macro,locale,time_macros
          ccache --show-config
          ccache -z

      - name: Configure Git for kernel build
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          git config --global advice.addEmbeddedRepo false

      - name: Setup build date
        id: date
        run: |
          current_date=$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')
          echo "current-date=${current_date}" >> $GITHUB_OUTPUT

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('**/Kbuild') }}
          restore-keys: |
            ccache-${{ runner.os }}-${{ env.CLANG_VERSION }}-
            ccache-${{ runner.os }}-

      - name: Cache Clang toolchain
        id: cache-clang
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/kernel_workspace/clang-aosp
          key: ${{ env.CLANG_VERSION }}

      - name: Download & extract Clang-aosp using aria2
        if: ${{ steps.cache-clang.outputs.cache-hit != 'true' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          mkdir -p clang-aosp
          DOWNLOAD_URL="https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/refs/heads/main/${CLANG_VERSION}.tar.gz"
          echo "下载链接: $DOWNLOAD_URL"
          aria2c -x16 -s16 -c "$DOWNLOAD_URL" -o "${CLANG_VERSION}.tar.gz"
          if [ ! -f "${CLANG_VERSION}.tar.gz" ]; then
            echo "错误: 下载失败！"
            exit 1
          fi
          tar -C clang-aosp -zxvf "${CLANG_VERSION}.tar.gz"
          rm -f "${CLANG_VERSION}.tar.gz"

      - name: Download kernel source
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone --recursive https://github.com/brokestar233/android_kernel_common_oneplus_sm8750 -b v3 android-kernel --depth=1
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/scripts
          sed -i 's/ -dirty//g' setlocalversion
          sed -i 's/OKI/android15-8/g' setlocalversion
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android15-6.6
          git clone https://github.com/ShirkNeko/SukiSU_patch.git

      - name: Setup KernelSU
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          KSU_VERSION=$(cd KernelSU && expr $(/usr/bin/git rev-list --count main) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Setup susfs
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          patch -p1 -F 3 < syscall_hooks.patch || true

      - name: Apply HMBird GKI patch
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel/drivers
          cat << 'EOF' > hmbird_patch.c
          #include <linux/init.h>
          #include <linux/module.h>
          #include <linux/of.h>
          #include <linux/slab.h>
          #include <linux/string.h>
          #include <linux/printk.h>
          #include <linux/errno.h>
          static int __init hmbird_patch_init(void)
          {
              struct device_node *ver_np;
              const char *type;
              int ret;
              ver_np = of_find_node_by_path("/soc/oplus,hmbird/version_type");
              if (!ver_np) {
                   pr_info("hmbird_patch: version_type node not found\n");
                   return 0;
              }
              ret = of_property_read_string(ver_np, "type", &type);
              if (ret) {
                   pr_info("hmbird_patch: type property not found\n");
                   of_node_put(ver_np);
                   return 0;
              }
              if (strcmp(type, "HMBIRD_OGKI") != 0) {
                   of_node_put(ver_np);
                   return 0;
              }
              struct property *prop = of_find_property(ver_np, "type", NULL);
              if (prop) {
                   struct property *new_prop = kmalloc(sizeof(*prop), GFP_KERNEL);
                   if (!new_prop) {
                        pr_err("hmbird_patch: kmalloc for new_prop failed\n");
                        of_node_put(ver_np);
                        return -ENOMEM;
                   }
                   memcpy(new_prop, prop, sizeof(*prop));
                   new_prop->value = kstrdup("HMBIRD_GKI", GFP_KERNEL);
                   if (!new_prop->value) {
                        pr_err("hmbird_patch: kmalloc for new_prop->value failed\n");
                        kfree(new_prop);
                        of_node_put(ver_np);
                        return -ENOMEM;
                   }
                   new_prop->length = strlen("HMBIRD_GKI") + 1;
                   if (of_remove_property(ver_np, prop)) {
                        pr_err("hmbird_patch: of_remove_property failed\n");
                        kfree(new_prop->value);
                        kfree(new_prop);
                        of_node_put(ver_np);
                        return -EINVAL;
                   }
                   if (of_add_property(ver_np, new_prop)) {
                        pr_err("hmbird_patch: of_add_property failed\n");
                        kfree(new_prop->value);
                        kfree(new_prop);
                        of_node_put(ver_np);
                        return -EINVAL;
                   }
                   pr_info("hmbird_patch: success from HMBIRD_OGKI to HMBIRD_GKI\n");
              }
              else {
                  pr_info("hmbird_patch: type property structure not found\n");
              }
              of_node_put(ver_np);
              return 0;
          }
          early_initcall(hmbird_patch_init);
          MODULE_LICENSE("GPL");
          MODULE_AUTHOR("reigadegr");
          MODULE_DESCRIPTION("Forcefully convert HMBIRD_OGKI to HMBIRD_GKI.");
          EOF
          if ! grep -q "hmbird_patch.o" Makefile; then
              echo "obj-y += hmbird_patch.o" >> Makefile
          fi

      - name: scx
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./android-kernel/kernel/sched
          rm -rf ./sched_ext/.git

      - name: Add SUSFS Configuration Settings
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          if [ ! -f "arch/arm64/configs/gki_defconfig" ]; then
              echo "错误: gki_defconfig 文件不存在！"
              ls -la arch/arm64/configs
              exit 1
          fi
          echo "CONFIG_KSU=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> arch/arm64/configs/gki_defconfig
          echo "CONFIG_LOCALVERSION=\"-g013ec21bba94-abogki383916444-4k\"" >> arch/arm64/configs/gki_defconfig

      - name: Build kernel
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/android-kernel
          export KBUILD_BUILD_TIMESTAMP='Tue Dec 17 23:36:49 UTC 2024'
          export CCACHE_BASEDIR="$GITHUB_WORKSPACE"
          export CCACHE_SLOPPINESS="include_file_ctime,include_file_mtime"
          export CCACHE_CPP2=yes
          export CCACHE_NOHASHDIR=yes
          export CC="ccache clang"
          export CXX="ccache clang++"
          export ARCH=arm64
          export SUBARCH=arm64
          export HEADER_ARCH=arm64
          export PATH=$GITHUB_WORKSPACE/kernel_workspace/clang-aosp/bin:$PATH
          export KBUILD_BUILD_HOST=Github-Action
          export KBUILD_BUILD_USER=$(echo ${{ github.actor }} | tr A-Z a-z) 
          export LLVM=1
          export LLVM_IAS=1
          export KCFLAGS="-O2 -fno-vectorize -fno-unroll-loops -fno-slp-vectorize"
          echo "===== 验证工具链 ====="
          which clang || { echo "错误: Clang 未找到！"; exit 1; }
          clang --version
          which ld.lld || { echo "错误: ld.lld 未找到！"; exit 1; }
          ld.lld --version
          echo "===== 准备构建目录 ====="
          rm -rf out
          mkdir -p out
          echo "===== 创建最小配置 ====="
          cat > out/.config <<EOF
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS=y
          CONFIG_LTO_CLANG=y
          CONFIG_LTO_NONE=n
          CONFIG_LTO_CLANG_THIN=y
          CONFIG_LTO_CLANG_FULL=n
          CONFIG_THINLTO=y
          EOF
          echo "===== 合并gki_defconfig ====="
          ./scripts/kconfig/merge_config.sh -O out out/.config arch/arm64/configs/gki_defconfig
          echo "===== 更新配置 ====="
          make O=out ARCH=$ARCH SUBARCH=$SUBARCH olddefconfig
          echo "===== 关键配置状态 ====="
          ./scripts/config --file out/.config -s LTO_CLANG
          ./scripts/config --file out/.config -s LTO_CLANG_THIN
          ./scripts/config --file out/.config -s KSU
          ./scripts/config --file out/.config -s KSU_SUSFS
          echo "===== 开始详细构建内核 ====="
          make -j$(($(nproc --all))) O=out \
            ARCH=$ARCH \
            SUBARCH=$SUBARCH \
            HEADER_ARCH=$HEADER_ARCH \
            CC="$CC" \
            CXX="$CXX" \
            LD=ld.lld \
            AR=llvm-ar \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            READELF=llvm-readelf \
            OBJSIZE=llvm-size \
            STRIP=llvm-strip
          ccache -s

      - name: Check kernel output files
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          if [ -f android-kernel/out/arch/arm64/boot/Image ]; then
            echo "CHECK_IMAGE=true" >> $GITHUB_ENV
          else
            echo "Kernel output file is empty"
            ls -la android-kernel/out/arch/arm64/boot
            tail -n 100 android-kernel/out/build.log || true
            exit 1
          fi

      - name: Make Anykernel3
        if: ${{ env.CHECK_IMAGE == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          rm -rf AnyKernel3/.git
          cp android-kernel/out/arch/arm64/boot/Image AnyKernel3/

      # 获取 Magisk 最新版本和下载链接
      - name: Get Magisk latest version info
        id: magisk_version
        run: |
          MAGISK_JSON=$(curl -s https://api.github.com/repos/topjohnwu/Magisk/releases/latest)
          MAGISK_VERSION=$(echo "$MAGISK_JSON" | jq -r .tag_name)
          MAGISK_URL=$(echo "$MAGISK_JSON" | jq -r '.assets[] | select(.name | test("\\.apk$")) | .browser_download_url')
          echo "MAGISK_VERSION=$MAGISK_VERSION" >> $GITHUB_ENV
          echo "MAGISK_URL=$MAGISK_URL" >> $GITHUB_ENV

      # 基于版本号缓存 Magisk APK
      - name: Cache Magisk APK
        id: cache-magisk-apk
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/Magisk.apk
          key: magisk-apk-${{ env.MAGISK_VERSION }}

      # 未命中缓存时自动下载最新 Magisk APK
      - name: Download Magisk APK
        if: steps.cache-magisk-apk.outputs.cache-hit != 'true'
        run: |
          wget -O Magisk.apk "$MAGISK_URL"

      # 解包 magiskboot 可执行文件
      - name: Extract magiskboot from Magisk APK
        run: |
          unzip -o Magisk.apk 'lib/x86_64/libmagiskboot.so' -d magisk_extract
          mv magisk_extract/lib/x86_64/libmagiskboot.so magiskboot
          chmod +x magiskboot
          rm -rf magisk_extract
          echo "MAGISKBOOT_PATH=${GITHUB_WORKSPACE}/magiskboot" >> $GITHUB_ENV

      - name: Repack kernel to boot image
        if: ${{ env.CHECK_IMAGE == 'true' }}
        run: |
          cd "$GITHUB_WORKSPACE"
          if [ ! -f "$MAGISKBOOT_PATH" ]; then
            echo "::error::magiskboot tool not found at $MAGISKBOOT_PATH"
            exit 1
          fi
          if [ ! -f "$BOOT_IMG_PATH" ]; then
            echo "::error::Original boot.img not found at $BOOT_IMG_PATH"
            exit 1
          fi
          mkdir -p repack_workdir
          cd repack_workdir
          cp "$BOOT_IMG_PATH" ./boot.img
          "$MAGISKBOOT_PATH" unpack ./boot.img
          if [ ! -f "kernel" ]; then
            echo "::error::Failed to unpack boot.img"
            ls -la
            exit 1
          fi
          rm -f kernel
          cp "../kernel_workspace/android-kernel/out/arch/arm64/boot/Image" kernel
          "$MAGISKBOOT_PATH" repack ./boot.img
          if [ ! -f "new-boot.img" ]; then
            echo "::error::Failed to repack boot.img"
            exit 1
          fi
          mv new-boot.img "../boot-${KSUVER}.img"
          cd ..
          echo "REPACKED_BOOT_IMG_PATH=$GITHUB_WORKSPACE/boot-${KSUVER}.img" >> $GITHUB_ENV

      - name: Create Anykernel3 ZIP
        if: ${{ env.CHECK_IMAGE == 'true' }}
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace/AnyKernel3
          zip -r9 "AnyKernel3-${KSUVER}.zip" . -x .gitignore
          mv "AnyKernel3-${KSUVER}.zip" $GITHUB_WORKSPACE/
          echo "ANY_KERNEL_ZIP_PATH=$GITHUB_WORKSPACE/AnyKernel3-${KSUVER}.zip" >> $GITHUB_ENV

      - name: Upload artifacts
        if: ${{ env.CHECK_IMAGE == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Artifacts-${{ env.KSUVER }}
          path: |
            kernel_workspace/android-kernel/out/arch/arm64/boot/Image
            ${{ env.ANY_KERNEL_ZIP_PATH }}
            ${{ env.REPACKED_BOOT_IMG_PATH }}
          retention-days: 7