# 工作流名称
name: Build Kernel

# 工作流触发条件
on:
  # 允许手动触发
  workflow_dispatch:
  # 当匹配 'v*.*.*.*' 格式的 tag 被推送到仓库时触发
  push:
    tags:
      - 'v*.*.*.*'

# 全局环境变量，可用于工作流中的所有作业和步骤
env:
  TZ: Asia/Shanghai # 设置时区为亚洲/上海
  # Ccache 相关环境变量配置，用于加速编译
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"
  CCACHE_DIR: ${{ github.workspace }}/.ccache # 统一使用隐藏目录，避免与项目文件混淆
  CCACHE_MAXSIZE: 10G # ccache 最大缓存大小
  # Clang 工具链版本
  CLANG_VERSION: Clang-19.0.0git-20240723-release
  CLANG_DIR: ${{ github.workspace }}/.clang # 统一使用隐藏目录

# 定义工作流中的作业
jobs:
  build:
    # 作业名称，使用 github.actor 动态显示触发者
    name: Build Kernel by ${{ github.actor }}
    # 作业运行的虚拟环境
    runs-on: ubuntu-latest
    # 为作业设置权限
    permissions:
      contents: write # 需要写入权限以上传 Release 产物

    steps:
      # =================================================================
      # 步骤 1: 检出所有必要的源代码仓库
      # =================================================================
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }} # 检出当前仓库
          submodules: true # 自动处理 git 子模块

      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: brokestar233/android_kernel_common_oneplus_sm8750
          ref: v9
          path: kernel_workspace/android-kernel # 检出到指定子目录
          fetch-depth: 0

      - name: Checkout susfs4ksu
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/susfs4ksu
          ref: gki-android15-6.6
          path: kernel_workspace/susfs4ksu

      - name: Checkout SukiSU_patch
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/SukiSU_patch
          path: kernel_workspace/SukiSU_patch
          
      # =================================================================
      # 步骤 2: 缓存管理
      # =================================================================
      - name: Restore Build Cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ${{ env.CLANG_DIR }}
            ${{ github.workspace }}/kernel_workspace/android-kernel/out
          # 缓存键，结合操作系统、Clang版本和内核构建文件哈希，确保缓存准确性
          key: ${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('**/Kbuild') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CLANG_VERSION }}-
      
      # =================================================================
      # 步骤 3: 设置编译环境和工具链
      # =================================================================
      - name: Setup Build Environment
        run: |
          # 设置 10GB 的交换空间以防止内存不足
          sudo fallocate -l 10G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          # 更新软件包列表并安装所有编译所需的依赖
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
              git dwarves libelf-dev ccache automake flex bison build-essential \
              zlib1g-dev libncurses5-dev libc6-dev-i386 bc device-tree-compiler \
              python3 pahole libssl-dev libffi-dev libxml2-dev libxslt1-dev \
              libgmp-dev libmpfr-dev libmpc-dev gcc-aarch64-linux-gnu make

          # 创建并配置 ccache 缓存目录
          mkdir -p "${{ env.CCACHE_DIR }}"
          ccache --set-config=cache_dir=${{ env.CCACHE_DIR }}
          ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
          ccache -z # 清零 ccache 统计数据
          
      - name: Download and Extract Clang Toolchain
        # 仅当 Clang 缓存未命中时执行
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${{ env.CLANG_DIR }}"
          cd "${{ env.CLANG_DIR }}"
          CLANG_URL="https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz"
          echo "Downloading Clang from $CLANG_URL"
          wget -q "$CLANG_URL" -O clang.tar.gz
          echo "Extracting Clang..."
          tar -zxf clang.tar.gz
          rm clang.tar.gz
      
      # =================================================================
      # 步骤 4: 准备内核源代码 (打补丁、集成模块、修改配置)
      # =================================================================
      - name: Set Dynamic Build Variables
        id: build_vars
        run: |
          # 设置构建日期
          echo "build_date=$(date -u -d "+8 hours" +"%Y-%m-%d %H:%M")" >> "$GITHUB_OUTPUT"
          
          # 安装 KernelSU 并计算版本号
          cd ${{ github.workspace }}/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s susfs-main
          # 通过 git commit 数量计算 KSU 版本号
          KSU_VERSION=$(($(git -C KernelSU rev-list --count susfs-main) + 10700))
          echo "ksu_version=$KSU_VERSION" >> "$GITHUB_OUTPUT"
          
      - name: Patch and Configure Kernel Source
        run: |
          cd ${{ github.workspace }}/kernel_workspace/android-kernel
          
          # 为 git 命令配置用户信息，防止 'git revert' 失败
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 修补 setlocalversion 脚本并撤销一个指定的 commit
          sed -i -e 's/ -dirty//g' -e 's/OKI/android15-8/g' scripts/setlocalversion
          git revert --no-edit 0dbc805bbbaa8bf36c1531560ba7abb4e4f2088c || true
          
          # 集成 susfs 补丁
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch || true
          patch -p1 -F 3 < syscall_hooks.patch || true
          
          # 修改 Makefile 以使用动态的 KSU 版本号
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${{ steps.build_vars.outputs.ksu_version }}/" kernel/Makefile

          # 向内核配置文件追加 KSU 和性能优化相关的配置
          sed -i 's/check_defconfig//' ./build.config.gki
          
          echo "Appending KSU and performance configs to gki_defconfig..."
          cat <<EOF >> arch/arm64/configs/gki_defconfig
          # KernelSU and SUSFS Configuration
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_HOOK_KPROBES=n
          CONFIG_KSU_TRACEPOINT_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          
          # Performance and Optimization
          CONFIG_AUTOFDO_CLANG=y
          CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          
          # Disable unused crypto options
          CONFIG_CRYPTO_LZ4K=n
          CONFIG_CRYPTO_LZ4KD=n
          CONFIG_CRYPTO_LZ4HC=n
          CONFIG_CRYPTO_842=n
          
          # Set local version string
          CONFIG_LOCALVERSION="-g4dc61d72e02f-abogki415959920-4k"
          EOF

      # =================================================================
      # 步骤 5: 编译内核
      # =================================================================
      - name: Build Kernel
        id: build_kernel
        # 将所有编译相关的环境变量设置在步骤的 env 块中，更清晰
        env:
          KBUILD_BUILD_TIMESTAMP: 'Mon May 12 09:09:59 UTC 2025'
          CCACHE_BASEDIR: ${{ github.workspace }}
          CC: ccache clang
          CXX: ccache clang++
          ARCH: arm64
          SUBARCH: arm64
          HEADER_ARCH: arm64
          PATH: ${{ env.CLANG_DIR }}/bin:${{ env.PATH }}
          KBUILD_BUILD_HOST: localhost
          KBUILD_BUILD_USER: Builder
          LLVM: 1
          LLVM_IAS: 1
          KCFLAGS: "-O2 -flto=thin -Wno-error"
          KMI_FLAGS: "SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0"
        run: |
          cd ${{ github.workspace }}/kernel_workspace/android-kernel
          
          # 验证工具链是否存在并打印版本信息
          echo "===== Verifying Toolchain ====="
          clang --version
          ld.lld --version
          
          # 生成内核配置文件
          make O=out gki_defconfig
          
          # 开始并行编译内核
          echo "===== Starting Kernel Build ====="
          make O=out -j$(nproc --all) \
              LD=ld.lld \
              AR=llvm-ar \
              NM=llvm-nm \
              OBJCOPY=llvm-objcopy \
              OBJDUMP=llvm-objdump \
              READELF=llvm-readelf \
              OBJSIZE=llvm-size \
              STRIP=llvm-strip \
              CLANG_TRIPLE=aarch64-linux-gnu- \
              CROSS_COMPILE=aarch64-linux-gnu- \
              KMI="$KMI_FLAGS" \
              KCFLAGS="$KCFLAGS" \
              CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo" | tee ../build.log
          
          # 显示 ccache 统计信息，用于调试缓存命中率
          ccache -s

      # =================================================================
      # 步骤 6: 打包并发布产物
      # =================================================================
      - name: Check for Build Artifacts
        id: check_artifacts
        run: |
          # 检查 Image 文件是否存在，如果不存在则构建失败
          if [[ -f "${{ github.workspace }}/kernel_workspace/android-kernel/out/arch/arm64/boot/Image" ]]; then
            echo "build_success=true" >> "$GITHUB_OUTPUT"
          else
            echo "Kernel Image not found! Build failed."
            echo "===== Tailing build log ====="
            tail -n 100 ${{ github.workspace }}/kernel_workspace/build.log || true
            exit 1
          fi

      - name: Package AnyKernel3 Zip
        # 仅当上一步检查成功时运行
        if: steps.check_artifacts.outputs.build_success == 'true'
        run: |
          KSU_VERSION=${{ steps.build_vars.outputs.ksu_version }}
          WORKSPACE=${{ github.workspace }}
          
          # 复制内核镜像到 AnyKernel3 目录
          cp "$WORKSPACE/kernel_workspace/android-kernel/out/arch/arm64/boot/Image" \
             "$WORKSPACE/kernel_workspace/SukiSU_patch/AnyKernel3/"
             
          # 打包为 zip 文件
          cd "$WORKSPACE/kernel_workspace/SukiSU_patch/AnyKernel3"
          zip -r9 "$WORKSPACE/AnyKernel3-$KSU_VERSION.zip" .
          
      - name: Upload Artifacts
        # 仅当上一步检查成功时运行
        if: steps.check_artifacts.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Build-${{ steps.build_vars.outputs.ksu_version }}
          path: |
            ${{ github.workspace }}/AnyKernel3-${{ steps.build_vars.outputs.ksu_version }}.zip
            ${{ github.workspace }}/kernel_workspace/android-kernel/out/arch/arm64/boot/Image

      - name: Save Build Cache
        uses: actions/cache/save@v4
        if: always()
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ${{ env.CLANG_DIR }}
            ${{ github.workspace }}/kernel_workspace/android-kernel/out
          key: ${{ steps.cache.outputs.cache-hit }}
      
      - name: Create GitHub Release
        # 仅当所有前面的步骤都成功时运行
        if: success()
        uses: softprops/action-gh-release@v2
        with:
          # 使用 secrets.GITHUB_TOKEN 进行身份验证
          token: ${{ secrets.GITHUB_TOKEN }}
          # 基于 KSU 版本号创建 tag
          tag_name: v${{ steps.build_vars.outputs.ksu_version }}
          # Release 的标题
          name: "SukiSU Kernel v${{ steps.build_vars.outputs.ksu_version }}"
          # Release 的正文内容
          body: |
            **Build Details**
            - KernelSU Version: ${{ steps.build_vars.outputs.ksu_version }}
            - Build Date: ${{ steps.build_vars.outputs.build_date }}
            
            **Build Environment**
            - OS: Ubuntu Latest
            - Clang Version: ${{ env.CLANG_VERSION }}
          # 要上传到 Release 的文件列表
          files: |
            ${{ github.workspace }}/AnyKernel3-${{ steps.build_vars.outputs.ksu_version }}.zip
            ${{ github.workspace }}/kernel_workspace/android-kernel/out/arch/arm64/boot/Image
