# Workflow name
name: Build Kernel

# Workflow triggers
on:
  workflow_dispatch: # Allow manual triggering
  push:
    tags:
      - 'v*.*.*.*' # Trigger on push of tags matching 'v*.*.*.*'

# Global environment variables
env:
  TZ: Asia/Shanghai # Set timezone to Asia/Shanghai
  CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
  CCACHE_NOHASHDIR: "true"
  CCACHE_HARDLINK: "true"
  CCACHE_DIR: ${{ github.workspace }}/.ccache
  CCACHE_MAXSIZE: 10G
  CLANG_VERSION: Clang-19.0.0git-20240723-release
  CLANG_DIR: ${{ github.workspace }}/.clang

jobs:
  build:
    name: Build Kernel by ${{ github.actor }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      # Step 1: Checkout repositories
      - name: Checkout Main Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          submodules: recursive # Use recursive to fetch nested submodules

      - name: Checkout Kernel Source
        uses: actions/checkout@v4
        with:
          repository: rin0011/android_kernel_common_oneplus_sm8750
          ref: oneplus/sm8750_v_15.0.0_oneplus_ace5_pro
          path: kernel_workspace/android-kernel

      - name: Checkout susfs4ksu
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/susfs4ksu
          ref: gki-android15-6.6
          path: kernel_workspace/susfs4ksu

      - name: Checkout SukiSU_patch
        uses: actions/checkout@v4
        with:
          repository: ShirkNeko/SukiSU_patch
          path: kernel_workspace/SukiSU_patch

      # Step 2: Cache management
      - name: Define Cache Key
        id: cache_key
        run: |
          echo "primary_key=${{ runner.os }}-${{ env.CLANG_VERSION }}-${{ hashFiles('kernel_workspace/android-kernel/**/Kbuild') }}" >> "$GITHUB_OUTPUT"

      - name: Restore Build Cache
        id: cache
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ${{ env.CLANG_DIR }}
            ${{ github.workspace }}/kernel_workspace/android-kernel/out
          key: ${{ steps.cache_key.outputs.primary_key }}
          restore-keys: |
            ${{ runner.os }}-${{ env.CLANG_VERSION }}-

      # Step 3: Setup build environment
      - name: Setup Build Environment
        run: |
          # Create swap space
          sudo fallocate -l 10G /swapfile || true
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile || true

          # Install dependencies
          sudo apt-get update
          sudo apt-get install -y dwarves libelf-dev ccache automake flex bison build-essential \
            zlib1g-dev libncurses5-dev bc device-tree-compiler python3 pahole \
            libssl-dev libffi-dev libxml2-dev libxslt1-dev libgmp-dev libmpfr-dev libmpc-dev \
            gcc-aarch64-linux-gnu coreutils

          # Configure ccache
          mkdir -p "${{ env.CCACHE_DIR }}"
          ccache --set-config=cache_dir=${{ env.CCACHE_DIR }}
          ccache --set-config=max_size=${{ env.CCACHE_MAXSIZE }}
          ccache -z

      - name: Download and Extract Clang Toolchain
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p "${{ env.CLANG_DIR }}"
          cd "${{ env.CLANG_DIR }}"
          CLANG_URL="https://github.com/ZyCromerZ/Clang/releases/download/19.0.0git-20240723-release/Clang-19.0.0git-20240723.tar.gz"
          wget -q "$CLANG_URL" -O clang.tar.gz
          tar -zxf clang.tar.gz
          rm clang.tar.gz

      # Step 4: Prepare kernel source
      - name: Set Dynamic Build Variables
        id: build_vars
        run: |
          cd ${{ github.workspace }}/kernel_workspace/android-kernel
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/susfs-main/kernel/setup.sh" | bash -s susfs-main
          KSU_VERSION=$(expr $(git rev-list --count susfs-main 2>/dev/null || echo 13000) + 10700)
          echo "ksu_version=$KSU_VERSION" >> "$GITHUB_OUTPUT"
          echo "build_date=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_OUTPUT"

      - name: Patch and Configure Kernel Source
        run: |
          cd ${{ github.workspace }}/kernel_workspace/android-kernel
          sed -i 's/ -dirty//g; s/OKI/android15-8/g' scripts/setlocalversion
          cp -r ../susfs4ksu/kernel_patches/fs/* ./fs/
          cp -r ../susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-android15-6.6.patch ./
          cp ../SukiSU_patch/hooks/syscall_hooks.patch ./
          patch -p1 < 50_add_susfs_in_gki-android15-6.6.patch
          patch -p1 -F 3 < syscall_hooks.patch
          sed -i 's/check_defconfig//' ./build.config.gki
          cat <<EOF >> arch/arm64/configs/gki_defconfig
          # KernelSU and SUSFS Configuration
          CONFIG_KSU=y
          CONFIG_KSU_SUSFS_SUS_SU=n
          CONFIG_KSU_MANUAL_HOOK=y
          CONFIG_KSU_HOOK_KPROBES=n
          CONFIG_KSU_TRACEPOINT_HOOK=n
          CONFIG_KSU_SUSFS=y
          CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_PATH=y
          CONFIG_KSU_SUSFS_SUS_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SUS_KSTAT=y
          CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
          CONFIG_KSU_SUSFS_TRY_UMOUNT=y
          CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
          CONFIG_KSU_SUSFS_SPOOF_UNAME=y
          CONFIG_KSU_SUSFS_ENABLE_LOG=y
          CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
          CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
          CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
          # Performance and Optimization
          CONFIG_AUTOFDO_CLANG=y
          CONFIG_LD_DEAD_CODE_DATA_ELIMINATION=y
          CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
          # Disable unused crypto options
          CONFIG_CRYPTO_LZ4K=n
          CONFIG_CRYPTO_LZ4KD=n
          CONFIG_CRYPTO_LZ4HC=n
          CONFIG_CRYPTO_842=n
          # Set local version string
          CONFIG_LOCALVERSION="-g4dc61d72e02f-abogki415959920-4k"
          EOF

      # Step 5: Compile kernel
      - name: Build Kernel
        id: build_kernel
        env:
          KBUILD_BUILD_TIMESTAMP: ${{ steps.build_vars.outputs.build_date }}
          CCACHE_BASEDIR: ${{ github.workspace }}
          CC: ccache clang
          CXX: ccache clang++
          ARCH: arm64
          SUBARCH: arm64
          HEADER_ARCH: arm64
          PATH: ${{ env.CLANG_DIR }}/bin:/usr/local/bin:/usr/bin:/bin
          KBUILD_BUILD_HOST: localhost
          KBUILD_BUILD_USER: Builder
          LLVM: 1
          LLVM_IAS: 1
          KCFLAGS: "-O2 -flto=thin -Wno-error"
          KMI: "SYSTEM_DLKM_RE_SIGN=0 BUILD_SYSTEM_DLKM=0 KMI_SYMBOL_LIST_STRICT_MODE=0"
        run: |
          cd ${{ github.workspace }}/kernel_workspace/android-kernel
          # Verify toolchain
          command -v clang >/dev/null || { echo "Error: Clang not found!"; exit 1; }
          clang --version
          command -v ld.lld >/dev/null || { echo "Error: ld.lld not found!"; exit 1; }
          ld.lld --version
          command -v make >/dev/null || { echo "Error: make not found!"; exit 1; }
          make --version
          # Generate kernel config
          make O=out ARCH=$ARCH SUBARCH=$SUBARCH gki_defconfig
          # Build kernel
          make O=out -j$(nproc --all) \
            LD=ld.lld AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump READELF=llvm-readelf OBJSIZE=llvm-size \
            STRIP=llvm-strip CLANG_TRIPLE=aarch64-linux-gnu- \
            CROSS_COMPILE=aarch64-linux-gnu- \
            CLANG_AUTOFDO_PROFILE="../android/gki/aarch64/afdo/kernel.afdo" | tee ../build.log
          ccache -s

      # Step 6: Package and release artifacts
      - name: Check for Build Artifacts
        id: check_artifacts
        run: |
          if [[ -f "${{ github.workspace }}/kernel_workspace/android-kernel/out/arch/arm64/boot/Image" ]]; then
            echo "build_success=true" >> "$GITHUB_OUTPUT"
          else
            echo "Kernel Image not found! Build failed."
            tail -n 100 ${{ github.workspace }}/kernel_workspace/build.log
            exit 1
          fi

      - name: Package AnyKernel3 Zip
        if: steps.check_artifacts.outputs.build_success == 'true'
        run: |
          KSU_VERSION=${{ steps.build_vars.outputs.ksu_version }}
          WORKSPACE=${{ github.workspace }}
          cp "$WORKSPACE/kernel_workspace/android-kernel/out/arch/arm64/boot/Image" \
            "$WORKSPACE/kernel_workspace/SukiSU_patch/AnyKernel3/"
          cd "$WORKSPACE/kernel_workspace/SukiSU_patch/AnyKernel3"
          zip -r9 "$WORKSPACE/AnyKernel3-$KSU_VERSION.zip" .
        continue-on-error: true # Allow continuation if zip creation fails

      - name: Upload Artifacts
        if: steps.check_artifacts.outputs.build_success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: Kernel-Build-${{ steps.build_vars.outputs.ksu_version }}
          path: |
            ${{ github.workspace }}/AnyKernel3-${{ steps.build_vars.outputs.ksu_version }}.zip
            ${{ github.workspace }}/kernel_workspace/android-kernel/out/arch/arm64/boot/Image

      - name: Save Build Cache
        if: always()
        uses: actions/cache/save@v4
        with:
          path: |
            ${{ env.CCACHE_DIR }}
            ${{ env.CLANG_DIR }}
            ${{ github.workspace }}/kernel_workspace/android-kernel/out
          key: ${{ steps.cache_key.outputs.primary_key }}

      - name: Create GitHub Release
        if: success() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ steps.build_vars.outputs.ksu_version }}
          name: SukiSU Kernel v${{ steps.build_vars.outputs.ksu_version }}
          body: |
            **Build Details**
            - KernelSU Version: ${{ steps.build_vars.outputs.ksu_version }}
            - Build Date: ${{ steps.build_vars.outputs.build_date }}
            **Build Environment**
            - OS: Ubuntu Latest
            - Clang Version: ${{ env.CLANG_VERSION }}
          files: |
            ${{ github.workspace }}/AnyKernel3-${{ steps.build_vars.outputs.ksu_version }}.zip
            ${{ github.workspace }}/kernel_workspace/android-kernel/out/arch/arm64/boot/Image